{
  "hash": "fa40581da0d2794f206cb8f156e531dc",
  "result": {
    "markdown": "---\ntitle: \"About Me\"\n---\n\n\n# Problem 1:\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nlibrary(lubridate)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'lubridate'\n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\nThe following objects are masked from 'package:base':\n\n    date, intersect, setdiff, union\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr   1.1.3     ✔ stringr 1.5.0\n✔ forcats 1.0.0     ✔ tibble  3.2.1\n✔ purrr   1.0.2     ✔ tidyr   1.3.0\n✔ readr   2.1.4     \n```\n:::\n\n::: {.cell-output .cell-output-stderr}\n```\n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n:::\n\n```{.r .cell-code}\nlibrary(quantmod)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: xts\nLoading required package: zoo\n\nAttaching package: 'zoo'\n\nThe following objects are masked from 'package:base':\n\n    as.Date, as.Date.numeric\n\n\n######################### Warning from 'xts' package ##########################\n#                                                                             #\n# The dplyr lag() function breaks how base R's lag() function is supposed to  #\n# work, which breaks lag(my_xts). Calls to lag(my_xts) that you type or       #\n# source() into this session won't work correctly.                            #\n#                                                                             #\n# Use stats::lag() to make sure you're not using dplyr::lag(), or you can add #\n# conflictRules('dplyr', exclude = 'lag') to your .Rprofile to stop           #\n# dplyr from breaking base R's lag() function.                                #\n#                                                                             #\n# Code in packages is not affected. It's protected by R's namespace mechanism #\n# Set `options(xts.warn_dplyr_breaks_lag = FALSE)` to suppress this warning.  #\n#                                                                             #\n###############################################################################\n\nAttaching package: 'xts'\n\nThe following objects are masked from 'package:dplyr':\n\n    first, last\n\nLoading required package: TTR\nRegistered S3 method overwritten by 'quantmod':\n  method            from\n  as.zoo.data.frame zoo \n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyquant)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nLoading required package: PerformanceAnalytics\n\nAttaching package: 'PerformanceAnalytics'\n\nThe following object is masked from 'package:graphics':\n\n    legend\n```\n:::\n\n```{.r .cell-code}\nlibrary(plotly)\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n\nAttaching package: 'plotly'\n\nThe following object is masked from 'package:ggplot2':\n\n    last_plot\n\nThe following object is masked from 'package:stats':\n\n    filter\n\nThe following object is masked from 'package:graphics':\n\n    layout\n```\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\noptions(\"getSymbols.warning4.0\"=FALSE)\noptions(\"getSymbols.yahoo.warning\"=FALSE)\n\ntickers = c(\"NKE\",\"CHDRY\",\"ROST\", \"ADDYY\", \"PUMSY\",\"HNNMY\")\nfor (i in tickers){\n  getSymbols(i, from = \"2020-01-01\", to = \"2023-05-01\")}\n\nx <- list(\n  title = \"date\"\n)\n\ny <- list(\n  title = \"value\"\n)\n\nstock <- data.frame(NKE$NKE.Adjusted,\n                    CHDRY$CHDRY.Adjusted,\n                    ROST$ROST.Adjusted,\n                    ADDYY$ADDYY.Adjusted,\n                    PUMSY$PUMSY.Adjusted,\n                    HNNMY$HNNMY.Adjusted)\n\n\nstock <- data.frame(stock,rownames(stock))\ncolnames(stock) <- append(tickers,'Dates')\nhead(stock)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                NKE    CHDRY     ROST    ADDYY    PUMSY    HNNMY      Dates\n2020-01-02 98.47343 118.5082 112.7606 157.8200 7.176477 3.633703 2020-01-02\n2020-01-03 98.20363 118.5082 112.7895 157.1823 7.525132 3.562453 2020-01-03\n2020-01-06 98.11693 118.5082 113.3397 157.4529 7.486393 3.553547 2020-01-06\n2020-01-07 98.06874 118.5082 114.6619 158.9506 7.781780 3.580266 2020-01-07\n2020-01-08 97.84712 118.5082 114.9998 163.1152 8.183702 3.598078 2020-01-08\n2020-01-09 97.77969 118.5082 117.8760 166.7580 7.747884 3.526829 2020-01-09\n```\n:::\n\n```{.r .cell-code}\nstock$Dates<-as.Date(stock$Dates,\"%Y-%m-%d\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# place your ggplotly visualization here\nggplot(stock, aes(x=Dates)) +\n  geom_line(aes(y=NKE, colour=\"NKE\"))+\n  geom_line(aes(y=CHDRY, colour=\"CHDRY\"))+\n  geom_line(aes(y=ROST, colour=\"ROST\"))+\n  geom_line(aes(y=ADDYY, colour=\"ADDYY\"))+\n  geom_line(aes(y=PUMSY, colour=\"PUMSY\"))+\n  geom_line(aes(y=HNNMY, colour=\"HNNMY\"))+\n   labs(\n    title = \"Stock Prices for Large Fashion Companies pre/post Pandemic\",\n    subtitle = \"From 2020-2023\",\n    x = \"Date\",\n    y = \"Adjusted Closing Prices\")+\n    theme(panel.background = element_rect(fill = \"white\", colour = \"grey50\"))+\n    guides(colour=guide_legend(title=\"Fashion Companies\")) \n```\n\n::: {.cell-output-display}\n![](about-me_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::",
    "supporting": [
      "about-me_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}